version: "3.8"

services:
  fluentd:
    build:
      context: ./src/app/fluentd
      dockerfile: Dockerfile
    container_name: fluentd-dev
    working_dir: /fluentd
    ports:
      - "24224:24224"
    volumes:
      - ./src/app/fluentd/fluent.conf:/fluentd/etc/fluent.conf
    networks:
      - app-net

  zookeeper:
    image: wurstmeister/zookeeper:latest
    container_name: zookeeper
    platform: linux/amd64
    ports:
      - "2181:2181"
    networks:
      - app-net

  kafka:
    image: wurstmeister/kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9093,OUTSIDE://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9093,OUTSIDE://localhost:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    depends_on:
      - zookeeper
    networks:
      - app-net
    volumes:
      - kafka_data:/var/lib/kafka/data

  user-service:
    build:
      context: ./src/app/user
      dockerfile: Dockerfile
    container_name: user-service-dev
    working_dir: /app
    depends_on:
      - fluentd
      - kafka
    ports:
      - "8000:8000"
    env_file:
      - ./src/app/user/.env.dev
    volumes:
      - ./src/app/user:/app
    command: >
      python -m uvicorn main:app --host 0.0.0.0 --port 8000 --reload
    networks:
      - app-net

 

networks:
  app-net:
    driver: bridge

volumes:
  kafka_data:
